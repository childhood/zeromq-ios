// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ChatMessage.pb.h"

@implementation ChatMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ChatMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ChatMessage ()
@property (retain) NSString* topic;
@property (retain) NSString* body;
@end

@implementation ChatMessage

- (BOOL) hasTopic {
  return !!hasTopic_;
}
- (void) setHasTopic:(BOOL) value {
  hasTopic_ = !!value;
}
@synthesize topic;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) value {
  hasBody_ = !!value;
}
@synthesize body;
- (void) dealloc {
  self.topic = nil;
  self.body = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.topic = @"";
    self.body = @"";
  }
  return self;
}
static ChatMessage* defaultChatMessageInstance = nil;
+ (void) initialize {
  if (self == [ChatMessage class]) {
    defaultChatMessageInstance = [[ChatMessage alloc] init];
  }
}
+ (ChatMessage*) defaultInstance {
  return defaultChatMessageInstance;
}
- (ChatMessage*) defaultInstance {
  return defaultChatMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTopic) {
    return NO;
  }
  if (!self.hasBody) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTopic) {
    [output writeString:1 value:self.topic];
  }
  if (self.hasBody) {
    [output writeString:2 value:self.body];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTopic) {
    size += computeStringSize(1, self.topic);
  }
  if (self.hasBody) {
    size += computeStringSize(2, self.body);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ChatMessage*) parseFromData:(NSData*) data {
  return (ChatMessage*)[[[ChatMessage builder] mergeFromData:data] build];
}
+ (ChatMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMessage*)[[[ChatMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ChatMessage*)[[[ChatMessage builder] mergeFromInputStream:input] build];
}
+ (ChatMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMessage*)[[[ChatMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatMessage*)[[[ChatMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ChatMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMessage*)[[[ChatMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMessage_Builder*) builder {
  return [[[ChatMessage_Builder alloc] init] autorelease];
}
+ (ChatMessage_Builder*) builderWithPrototype:(ChatMessage*) prototype {
  return [[ChatMessage builder] mergeFrom:prototype];
}
- (ChatMessage_Builder*) builder {
  return [ChatMessage builder];
}
@end

@interface ChatMessage_Builder()
@property (retain) ChatMessage* result;
@end

@implementation ChatMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ChatMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ChatMessage_Builder*) clear {
  self.result = [[[ChatMessage alloc] init] autorelease];
  return self;
}
- (ChatMessage_Builder*) clone {
  return [ChatMessage builderWithPrototype:result];
}
- (ChatMessage*) defaultInstance {
  return [ChatMessage defaultInstance];
}
- (ChatMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatMessage*) buildPartial {
  ChatMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ChatMessage_Builder*) mergeFrom:(ChatMessage*) other {
  if (other == [ChatMessage defaultInstance]) {
    return self;
  }
  if (other.hasTopic) {
    [self setTopic:other.topic];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTopic:[input readString]];
        break;
      }
      case 18: {
        [self setBody:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTopic {
  return result.hasTopic;
}
- (NSString*) topic {
  return result.topic;
}
- (ChatMessage_Builder*) setTopic:(NSString*) value {
  result.hasTopic = YES;
  result.topic = value;
  return self;
}
- (ChatMessage_Builder*) clearTopic {
  result.hasTopic = NO;
  result.topic = @"";
  return self;
}
- (BOOL) hasBody {
  return result.hasBody;
}
- (NSString*) body {
  return result.body;
}
- (ChatMessage_Builder*) setBody:(NSString*) value {
  result.hasBody = YES;
  result.body = value;
  return self;
}
- (ChatMessage_Builder*) clearBody {
  result.hasBody = NO;
  result.body = @"";
  return self;
}
@end

